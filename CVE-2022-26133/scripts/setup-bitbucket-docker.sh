#!/usr/bin/env bash

echo_color() {
    case $1 in
        "red")
            echo -e "$(tput setaf 1)$(tput bold)$2$(tput sgr0)"
            ;;
        *)
            echo -e "$(tput setaf 4)$(tput bold)$1$(tput sgr0)"
            ;;
    esac
}

get_args() {
    while [[ $# -gt 0 ]]
    do
        key="$1"
        case $key in
             --project-name|-p)
                BITBUCKET_DOCKER_PROJECT_NAME="$2"
                shift # past argument
                shift # past value
                ;;
            --bitbucket-version)
                BITBUCKET_DOCKER_VERSION="$2"
                shift
                shift
                ;;
            --bitbucket-docker-base-port)
                BITBUCKET_DOCKER_BASE_PORT="$2"
                shift
                shift
                ;;
            --bitbucket-setup-base-node)
                BITBUCKET_INIT="yes"
                shift
                ;;
            --help|-h)
                print_usage
                exit 0
                ;;
            *)    # unknown option
                shift # past argument
                ;;
        esac
    done
}

is_remote_instance() {

    [ -n "$SSH_CLIENT" ] && return

    false
}

setup_x11_forwarding_for_remote_docker() {
    
    # the below commands enables X11 forwarding from inside the docker container 
    # when running from remote VMs over SSH session (e.g GCP compute instances)
    # this is mainly helpful if we want to popup apps like xcalc

    XAUTH="/tmp/.docker.xauth"

    [ -f $XAUTH ] && return

    xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | sudo xauth -f $XAUTH nmerge -

    sudo chmod 777 $XAUTH

    DISPLAY=`echo $DISPLAY | sed 's/^[^:]*\(.*\)/172.17.0.1\1/'`

    export DISPLAY
}

create_shared_directory() {

    echo_color "[+] Shared Directory on host:\t ${BITBUCKET_DOCKER_HOST_SHARED_DIR}"

    if [ -d "$BITBUCKET_DOCKER_HOST_SHARED_DIR" ]; then
        echo_color red "[+] Shared directory already exists on host; skipping dir creation"
        return
    fi

    echo_color "[+] Creating shared directory on host"
    sudo mkdir -p "${BITBUCKET_DOCKER_HOST_SHARED_DIR}"
    sudo chown 2003:2003 "${BITBUCKET_DOCKER_HOST_SHARED_DIR}"
}

print_usage()
{
    cat <<-EOF
    
    Run Bitbucket Data Center cluster inside docker

    Usage:
        setup-bitbucket-docker.sh [-p <project name>] [--bitbucket-docker-base-port <port-number>] [--bitbucket-version <version>] [--bitbucket-setup-base-node] [ARGS...]
        setup-bitbucket-docker.sh -h|--help

        This script will setup a Bitbucket Data Center cluster inside docker containers.
        Default option is to run the latest version of Bitbucket Data Center with 2 nodes (load balanced using Haproxy) and a Postgresql DB
       
         -p, --project-name                Project name for the docker-compose command; also used as part of the shared dir path
                                           This is primarily used for running multiple versions of Bitbucket Data Center on the same host
         --bitbucket-docker-base-port     Port number to be used as a base port for the various Bitbucket interfaces; defaults to 4000
                                           See parse_env_file function to understand the various ports used.
         --bitbucket-version              Bitbucket Data Center version to be used, defaults to the latest Bitbucket Data Center release version.
         --bitbucket-setup-base-node      This is used only during the install time to setup the first node. Once this node is fully setup
                                           the remaining nodes can be spun up.
         -h, --help                        Prints this text
EOF
}

parse_env_file()
{
    [[ -z "$BITBUCKET_DOCKER_VERSION" ]] && BITBUCKET_DOCKER_VERSION="latest"

    [[ -z "$BITBUCKET_DOCKER_PROJECT_NAME" ]] && BITBUCKET_DOCKER_PROJECT_NAME="bitbucket-default-project"

    [[ -z "$BITBUCKET_DOCKER_BASE_PORT" ]] && BITBUCKET_DOCKER_BASE_PORT=4000

    # include the project name as part of the config params, so that we can support multiple Bitbucket versions on a single host 
    BITBUCKET_DOCKER_HOST_SHARED_DIR=~/workspace/bitbucket/${BITBUCKET_DOCKER_PROJECT_NAME}/shared
    BITBUCKET_DOCKER_NODE1_HOSTNAME="${BITBUCKET_DOCKER_PROJECT_NAME}-node1"
    BITBUCKET_DOCKER_NODE2_HOSTNAME="${BITBUCKET_DOCKER_PROJECT_NAME}-node2"
    BITBUCKET_DOCKER_HAZELCAST_GROUP_NAME="${BITBUCKET_DOCKER_PROJECT_NAME}-cluster"
        
    BITBUCKET_DOCKER_NODE1_HTTP_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 10))
    BITBUCKET_DOCKER_NODE2_HTTP_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 20))

    BITBUCKET_DOCKER_NODE1_DEBUG_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 30))
    BITBUCKET_DOCKER_NODE2_DEBUG_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 40))

    BITBUCKET_DOCKER_NODE1_HAZELCAST_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 50))
    BITBUCKET_DOCKER_NODE2_HAZELCAST_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 60))

    BITBUCKET_DOCKER_HOST_DB_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 70))
    BITBUCKET_DOCKER_PROXY_PORT=$((BITBUCKET_DOCKER_BASE_PORT + 80))

    # configure environment specific for remote hosts (e.g GCP compute instances)
    if is_remote_instance; then
        # custom X11 forwarding file; we will create this inside the function setup_x11_forwarding_for_remote_docker
        BITBUCKET_DOCKER_XAUTH_FILE="/tmp/.docker.xauth"
        # get the Public ip so that we can correctly configure the load balancer as well as Bitbucket's proxy variables 
        BITBUCKET_DOCKER_PROXY_IP_ADDR=$(curl -s ifconfig.co) 
    else
        BITBUCKET_DOCKER_PROXY_IP_ADDR="127.0.0.1"
        BITBUCKET_DOCKER_XAUTH_FILE="/tmp/.X11-unix"
    fi

    # create a random pass for the DB during the initial run and
    # store it locally on the host for subsequent runs
    if [[ -f "./${BITBUCKET_DOCKER_PROJECT_NAME}_db_creds" ]]; then
        BITBUCKET_DOCKER_DB_PASS="$(cat ./${BITBUCKET_DOCKER_PROJECT_NAME}_db_creds)" 
    else
        BITBUCKET_DOCKER_DB_PASS="$(od -A n -t d -N 4 /dev/urandom | tr -d '[:space:]')"
        echo "$BITBUCKET_DOCKER_DB_PASS" > "./${BITBUCKET_DOCKER_PROJECT_NAME}_db_creds"
    fi
    
    BITBUCKET_DOCKER_HAPROXY_CONFIG="./haproxy/${BITBUCKET_DOCKER_PROJECT_NAME}_haproxy.cfg"


    export BITBUCKET_DOCKER_HOST_SHARED_DIR

    export BITBUCKET_DOCKER_XAUTH_FILE

    export BITBUCKET_DOCKER_VERSION

    export BITBUCKET_DOCKER_NODE1_HOSTNAME
    export BITBUCKET_DOCKER_NODE2_HOSTNAME

    export BITBUCKET_DOCKER_NODE1_HTTP_PORT
    export BITBUCKET_DOCKER_NODE2_HTTP_PORT

    export BITBUCKET_DOCKER_NODE1_DEBUG_PORT
    export BITBUCKET_DOCKER_NODE2_DEBUG_PORT

    export BITBUCKET_DOCKER_NODE1_HAZELCAST_PORT
    export BITBUCKET_DOCKER_NODE2_HAZELCAST_PORT

    export BITBUCKET_DOCKER_PROXY_IP_ADDR
    export BITBUCKET_DOCKER_PROXY_PORT

    export BITBUCKET_DOCKER_HOST_DB_PORT

    export BITBUCKET_DOCKER_DB_PASS

    export BITBUCKET_DOCKER_HAPROXY_CONFIG

    export BITBUCKET_DOCKER_HAZELCAST_GROUP_NAME
    
    envsubst < .env > ".${BITBUCKET_DOCKER_PROJECT_NAME}_env" 
    envsubst < haproxy/haproxy.cfg > "$BITBUCKET_DOCKER_HAPROXY_CONFIG"
}

main() {

    get_args "$@"

    echo_color "[+] Starting Bitbucket Data Center Docker Installation ..." 

    # Install docker if not already installed
    if ! command -v docker-compose &> /dev/null; then
        echo_color "red" "[+] Please install docker-compose and restart the script. "
        exit 
        # ~/workspace/tools/infra-config/setup-docker.sh
    fi

    parse_env_file

    echo_color "[+] Bitbucket Version:\t\t $BITBUCKET_DOCKER_VERSION"

    echo_color "[+] Bitbucket Base Port:\t $BITBUCKET_DOCKER_BASE_PORT"

    echo_color "[+] Project Name:\t\t $BITBUCKET_DOCKER_PROJECT_NAME"
    args="--project-name $BITBUCKET_DOCKER_PROJECT_NAME"

    # During install we typically set a single node, and fully configure it by
    # following the on-screen instructions in the Bitbucket web GUI.
    # only once this node is configured, the load balancer and the remaining nodes
    # are started.
    if [[ -n $BITBUCKET_INIT ]]; then
        echo_color "[+] Bitbucket Setup Stage:\t Init (bitbucket_node_1)"
        service_name=bitbucket_node_1
    fi

    create_shared_directory

    if is_remote_instance; then
        echo_color "[+] Setting up X11 forwarding for remote docker containers ..."
        setup_x11_forwarding_for_remote_docker
    fi

    args="$args --env-file .${BITBUCKET_DOCKER_PROJECT_NAME}_env"

    # To debug the docker-compose uncomment the below and comment out the line following it. 
    # cmd="docker-compose $args config"
    cmd="docker-compose $args up $service_name"
    echo_color "\n[+] Running Command:\t $cmd\n"

    eval "$cmd"
}

main "$@"

